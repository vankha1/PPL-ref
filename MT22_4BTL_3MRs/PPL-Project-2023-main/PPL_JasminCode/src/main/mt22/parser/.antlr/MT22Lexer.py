# Generated from d:/Learning_Documents_of_Third_Year/Principles of Programming Languages/Assignment 222/MT22_4BTL_3MRs/PPL-Project-2023-main/PPL_JasminCode/src/main/mt22/parser/MT22.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,57,456,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,1,0,1,0,3,0,
        132,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        3,1,148,8,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,3,3,157,8,3,1,4,1,4,3,4,
        161,8,4,1,4,1,4,1,5,1,5,5,5,167,8,5,10,5,12,5,170,9,5,1,6,1,6,1,
        6,5,6,175,8,6,10,6,12,6,178,9,6,1,6,1,6,4,6,182,8,6,11,6,12,6,183,
        5,6,186,8,6,10,6,12,6,189,9,6,3,6,191,8,6,1,7,1,7,5,7,195,8,7,10,
        7,12,7,198,9,7,1,7,1,7,1,7,1,8,1,8,3,8,205,8,8,1,9,1,9,1,9,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
        1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
        1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,5,32,
        340,8,32,10,32,12,32,343,9,32,1,32,1,32,1,33,1,33,1,33,1,33,5,33,
        351,8,33,10,33,12,33,354,9,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,
        1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,
        1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,
        1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,
        1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,
        1,57,1,58,1,58,1,59,1,59,5,59,420,8,59,10,59,12,59,423,9,59,1,60,
        4,60,426,8,60,11,60,12,60,427,1,60,1,60,1,61,1,61,5,61,434,8,61,
        10,61,12,61,437,9,61,1,61,3,61,440,8,61,1,61,1,61,1,62,1,62,5,62,
        446,8,62,10,62,12,62,449,9,62,1,62,1,62,1,62,1,63,1,63,1,63,1,352,
        0,64,1,1,3,2,5,3,7,0,9,0,11,0,13,0,15,4,17,0,19,0,21,0,23,5,25,6,
        27,7,29,8,31,9,33,10,35,11,37,12,39,13,41,14,43,15,45,16,47,17,49,
        18,51,19,53,20,55,21,57,22,59,23,61,24,63,25,65,26,67,27,69,28,71,
        29,73,30,75,31,77,32,79,33,81,34,83,35,85,36,87,37,89,38,91,39,93,
        40,95,41,97,42,99,43,101,44,103,45,105,46,107,47,109,48,111,49,113,
        50,115,51,117,52,119,53,121,54,123,55,125,56,127,57,1,0,12,2,0,69,
        69,101,101,2,0,43,43,45,45,1,0,48,57,1,0,49,57,1,0,34,34,4,0,10,
        10,34,34,39,39,92,92,8,0,34,34,39,39,92,92,98,98,102,102,110,110,
        114,114,116,116,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,3,0,8,10,12,13,32,32,2,1,10,10,13,13,467,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,15,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,
        0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
        0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,
        0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,
        1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,
        0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,
        0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,1,131,1,0,0,0,3,147,1,0,0,0,5,
        151,1,0,0,0,7,154,1,0,0,0,9,158,1,0,0,0,11,164,1,0,0,0,13,190,1,
        0,0,0,15,192,1,0,0,0,17,204,1,0,0,0,19,206,1,0,0,0,21,209,1,0,0,
        0,23,212,1,0,0,0,25,220,1,0,0,0,27,226,1,0,0,0,29,233,1,0,0,0,31,
        238,1,0,0,0,33,244,1,0,0,0,35,250,1,0,0,0,37,255,1,0,0,0,39,261,
        1,0,0,0,41,265,1,0,0,0,43,273,1,0,0,0,45,277,1,0,0,0,47,284,1,0,
        0,0,49,293,1,0,0,0,51,296,1,0,0,0,53,305,1,0,0,0,55,310,1,0,0,0,
        57,313,1,0,0,0,59,321,1,0,0,0,61,326,1,0,0,0,63,329,1,0,0,0,65,335,
        1,0,0,0,67,346,1,0,0,0,69,360,1,0,0,0,71,362,1,0,0,0,73,364,1,0,
        0,0,75,366,1,0,0,0,77,368,1,0,0,0,79,370,1,0,0,0,81,372,1,0,0,0,
        83,374,1,0,0,0,85,376,1,0,0,0,87,378,1,0,0,0,89,380,1,0,0,0,91,382,
        1,0,0,0,93,384,1,0,0,0,95,386,1,0,0,0,97,388,1,0,0,0,99,390,1,0,
        0,0,101,393,1,0,0,0,103,396,1,0,0,0,105,399,1,0,0,0,107,402,1,0,
        0,0,109,404,1,0,0,0,111,406,1,0,0,0,113,409,1,0,0,0,115,412,1,0,
        0,0,117,415,1,0,0,0,119,417,1,0,0,0,121,425,1,0,0,0,123,431,1,0,
        0,0,125,443,1,0,0,0,127,453,1,0,0,0,129,132,3,53,26,0,130,132,3,
        33,16,0,131,129,1,0,0,0,131,130,1,0,0,0,132,2,1,0,0,0,133,134,3,
        13,6,0,134,135,3,7,3,0,135,148,1,0,0,0,136,137,3,13,6,0,137,138,
        3,9,4,0,138,148,1,0,0,0,139,140,5,46,0,0,140,141,3,11,5,0,141,142,
        3,9,4,0,142,148,1,0,0,0,143,144,3,13,6,0,144,145,3,7,3,0,145,146,
        3,9,4,0,146,148,1,0,0,0,147,133,1,0,0,0,147,136,1,0,0,0,147,139,
        1,0,0,0,147,143,1,0,0,0,148,149,1,0,0,0,149,150,6,1,0,0,150,4,1,
        0,0,0,151,152,3,13,6,0,152,153,6,2,1,0,153,6,1,0,0,0,154,156,5,46,
        0,0,155,157,3,11,5,0,156,155,1,0,0,0,156,157,1,0,0,0,157,8,1,0,0,
        0,158,160,7,0,0,0,159,161,7,1,0,0,160,159,1,0,0,0,160,161,1,0,0,
        0,161,162,1,0,0,0,162,163,3,11,5,0,163,10,1,0,0,0,164,168,7,2,0,
        0,165,167,7,2,0,0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,
        0,168,169,1,0,0,0,169,12,1,0,0,0,170,168,1,0,0,0,171,191,5,48,0,
        0,172,176,7,3,0,0,173,175,7,2,0,0,174,173,1,0,0,0,175,178,1,0,0,
        0,176,174,1,0,0,0,176,177,1,0,0,0,177,187,1,0,0,0,178,176,1,0,0,
        0,179,181,5,95,0,0,180,182,7,2,0,0,181,180,1,0,0,0,182,183,1,0,0,
        0,183,181,1,0,0,0,183,184,1,0,0,0,184,186,1,0,0,0,185,179,1,0,0,
        0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,191,1,0,0,
        0,189,187,1,0,0,0,190,171,1,0,0,0,190,172,1,0,0,0,191,14,1,0,0,0,
        192,196,7,4,0,0,193,195,3,17,8,0,194,193,1,0,0,0,195,198,1,0,0,0,
        196,194,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,198,196,1,0,0,0,
        199,200,7,4,0,0,200,201,6,7,2,0,201,16,1,0,0,0,202,205,8,5,0,0,203,
        205,3,19,9,0,204,202,1,0,0,0,204,203,1,0,0,0,205,18,1,0,0,0,206,
        207,5,92,0,0,207,208,7,6,0,0,208,20,1,0,0,0,209,210,5,92,0,0,210,
        211,8,6,0,0,211,22,1,0,0,0,212,213,5,105,0,0,213,214,5,110,0,0,214,
        215,5,116,0,0,215,216,5,101,0,0,216,217,5,103,0,0,217,218,5,101,
        0,0,218,219,5,114,0,0,219,24,1,0,0,0,220,221,5,102,0,0,221,222,5,
        108,0,0,222,223,5,111,0,0,223,224,5,97,0,0,224,225,5,116,0,0,225,
        26,1,0,0,0,226,227,5,114,0,0,227,228,5,101,0,0,228,229,5,116,0,0,
        229,230,5,117,0,0,230,231,5,114,0,0,231,232,5,110,0,0,232,28,1,0,
        0,0,233,234,5,97,0,0,234,235,5,117,0,0,235,236,5,116,0,0,236,237,
        5,111,0,0,237,30,1,0,0,0,238,239,5,98,0,0,239,240,5,114,0,0,240,
        241,5,101,0,0,241,242,5,97,0,0,242,243,5,107,0,0,243,32,1,0,0,0,
        244,245,5,102,0,0,245,246,5,97,0,0,246,247,5,108,0,0,247,248,5,115,
        0,0,248,249,5,101,0,0,249,34,1,0,0,0,250,251,5,118,0,0,251,252,5,
        111,0,0,252,253,5,105,0,0,253,254,5,100,0,0,254,36,1,0,0,0,255,256,
        5,97,0,0,256,257,5,114,0,0,257,258,5,114,0,0,258,259,5,97,0,0,259,
        260,5,121,0,0,260,38,1,0,0,0,261,262,5,111,0,0,262,263,5,117,0,0,
        263,264,5,116,0,0,264,40,1,0,0,0,265,266,5,98,0,0,266,267,5,111,
        0,0,267,268,5,111,0,0,268,269,5,108,0,0,269,270,5,101,0,0,270,271,
        5,97,0,0,271,272,5,110,0,0,272,42,1,0,0,0,273,274,5,102,0,0,274,
        275,5,111,0,0,275,276,5,114,0,0,276,44,1,0,0,0,277,278,5,115,0,0,
        278,279,5,116,0,0,279,280,5,114,0,0,280,281,5,105,0,0,281,282,5,
        110,0,0,282,283,5,103,0,0,283,46,1,0,0,0,284,285,5,99,0,0,285,286,
        5,111,0,0,286,287,5,110,0,0,287,288,5,116,0,0,288,289,5,105,0,0,
        289,290,5,110,0,0,290,291,5,117,0,0,291,292,5,101,0,0,292,48,1,0,
        0,0,293,294,5,100,0,0,294,295,5,111,0,0,295,50,1,0,0,0,296,297,5,
        102,0,0,297,298,5,117,0,0,298,299,5,110,0,0,299,300,5,99,0,0,300,
        301,5,116,0,0,301,302,5,105,0,0,302,303,5,111,0,0,303,304,5,110,
        0,0,304,52,1,0,0,0,305,306,5,116,0,0,306,307,5,114,0,0,307,308,5,
        117,0,0,308,309,5,101,0,0,309,54,1,0,0,0,310,311,5,111,0,0,311,312,
        5,102,0,0,312,56,1,0,0,0,313,314,5,105,0,0,314,315,5,110,0,0,315,
        316,5,104,0,0,316,317,5,101,0,0,317,318,5,114,0,0,318,319,5,105,
        0,0,319,320,5,116,0,0,320,58,1,0,0,0,321,322,5,101,0,0,322,323,5,
        108,0,0,323,324,5,115,0,0,324,325,5,101,0,0,325,60,1,0,0,0,326,327,
        5,105,0,0,327,328,5,102,0,0,328,62,1,0,0,0,329,330,5,119,0,0,330,
        331,5,104,0,0,331,332,5,105,0,0,332,333,5,108,0,0,333,334,5,101,
        0,0,334,64,1,0,0,0,335,336,5,47,0,0,336,337,5,47,0,0,337,341,1,0,
        0,0,338,340,8,7,0,0,339,338,1,0,0,0,340,343,1,0,0,0,341,339,1,0,
        0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,341,1,0,0,0,344,345,6,32,
        3,0,345,66,1,0,0,0,346,347,5,47,0,0,347,348,5,42,0,0,348,352,1,0,
        0,0,349,351,9,0,0,0,350,349,1,0,0,0,351,354,1,0,0,0,352,353,1,0,
        0,0,352,350,1,0,0,0,353,355,1,0,0,0,354,352,1,0,0,0,355,356,5,42,
        0,0,356,357,5,47,0,0,357,358,1,0,0,0,358,359,6,33,3,0,359,68,1,0,
        0,0,360,361,5,59,0,0,361,70,1,0,0,0,362,363,5,44,0,0,363,72,1,0,
        0,0,364,365,5,58,0,0,365,74,1,0,0,0,366,367,5,40,0,0,367,76,1,0,
        0,0,368,369,5,41,0,0,369,78,1,0,0,0,370,371,5,123,0,0,371,80,1,0,
        0,0,372,373,5,125,0,0,373,82,1,0,0,0,374,375,5,91,0,0,375,84,1,0,
        0,0,376,377,5,93,0,0,377,86,1,0,0,0,378,379,5,61,0,0,379,88,1,0,
        0,0,380,381,5,42,0,0,381,90,1,0,0,0,382,383,5,47,0,0,383,92,1,0,
        0,0,384,385,5,43,0,0,385,94,1,0,0,0,386,387,5,45,0,0,387,96,1,0,
        0,0,388,389,5,33,0,0,389,98,1,0,0,0,390,391,5,60,0,0,391,392,5,61,
        0,0,392,100,1,0,0,0,393,394,5,62,0,0,394,395,5,61,0,0,395,102,1,
        0,0,0,396,397,5,33,0,0,397,398,5,61,0,0,398,104,1,0,0,0,399,400,
        5,61,0,0,400,401,5,61,0,0,401,106,1,0,0,0,402,403,5,60,0,0,403,108,
        1,0,0,0,404,405,5,62,0,0,405,110,1,0,0,0,406,407,5,58,0,0,407,408,
        5,58,0,0,408,112,1,0,0,0,409,410,5,38,0,0,410,411,5,38,0,0,411,114,
        1,0,0,0,412,413,5,124,0,0,413,414,5,124,0,0,414,116,1,0,0,0,415,
        416,5,37,0,0,416,118,1,0,0,0,417,421,7,8,0,0,418,420,7,9,0,0,419,
        418,1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,
        120,1,0,0,0,423,421,1,0,0,0,424,426,7,10,0,0,425,424,1,0,0,0,426,
        427,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,
        430,6,60,3,0,430,122,1,0,0,0,431,435,5,34,0,0,432,434,3,17,8,0,433,
        432,1,0,0,0,434,437,1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,
        439,1,0,0,0,437,435,1,0,0,0,438,440,7,11,0,0,439,438,1,0,0,0,440,
        441,1,0,0,0,441,442,6,61,4,0,442,124,1,0,0,0,443,447,7,4,0,0,444,
        446,3,17,8,0,445,444,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,
        448,1,0,0,0,448,450,1,0,0,0,449,447,1,0,0,0,450,451,3,21,10,0,451,
        452,6,62,5,0,452,126,1,0,0,0,453,454,9,0,0,0,454,455,6,63,6,0,455,
        128,1,0,0,0,19,0,131,147,156,160,168,176,183,187,190,196,204,341,
        352,421,427,435,439,447,7,1,1,0,1,2,1,1,7,2,6,0,0,1,61,3,1,62,4,
        1,63,5
    ]

class MT22Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    BOOLEANLIT = 1
    FLOATLIT = 2
    INTLIT = 3
    STRINGLIT = 4
    INTEGER = 5
    FLOAT = 6
    RETURN = 7
    AUTO = 8
    BREAK = 9
    FALSE = 10
    VOID = 11
    ARRAY = 12
    OUT = 13
    BOOLEAN = 14
    FOR = 15
    STRING = 16
    CONTINUE = 17
    DO = 18
    FUNCTION = 19
    TRUE = 20
    OF = 21
    INHERIT = 22
    ELSE = 23
    IF = 24
    WHILE = 25
    CPP_STYLE_CMT = 26
    C_STYLE_CMT = 27
    SEMI = 28
    COMMA = 29
    COLON = 30
    LR = 31
    RR = 32
    LC = 33
    RC = 34
    LS = 35
    RS = 36
    ASS = 37
    MUL = 38
    DIV = 39
    ADD = 40
    MINUS = 41
    NOT = 42
    LTE = 43
    GTE = 44
    NEQ = 45
    EQ = 46
    LT = 47
    GT = 48
    STR_OPR = 49
    AND = 50
    OR = 51
    MOD = 52
    ID = 53
    WS = 54
    UNCLOSE_STRING = 55
    ILLEGAL_ESCAPE = 56
    ERROR_CHAR = 57

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'integer'", "'float'", "'return'", "'auto'", "'break'", "'false'", 
            "'void'", "'array'", "'out'", "'boolean'", "'for'", "'string'", 
            "'continue'", "'do'", "'function'", "'true'", "'of'", "'inherit'", 
            "'else'", "'if'", "'while'", "';'", "','", "':'", "'('", "')'", 
            "'{'", "'}'", "'['", "']'", "'='", "'*'", "'/'", "'+'", "'-'", 
            "'!'", "'<='", "'>='", "'!='", "'=='", "'<'", "'>'", "'::'", 
            "'&&'", "'||'", "'%'" ]

    symbolicNames = [ "<INVALID>",
            "BOOLEANLIT", "FLOATLIT", "INTLIT", "STRINGLIT", "INTEGER", 
            "FLOAT", "RETURN", "AUTO", "BREAK", "FALSE", "VOID", "ARRAY", 
            "OUT", "BOOLEAN", "FOR", "STRING", "CONTINUE", "DO", "FUNCTION", 
            "TRUE", "OF", "INHERIT", "ELSE", "IF", "WHILE", "CPP_STYLE_CMT", 
            "C_STYLE_CMT", "SEMI", "COMMA", "COLON", "LR", "RR", "LC", "RC", 
            "LS", "RS", "ASS", "MUL", "DIV", "ADD", "MINUS", "NOT", "LTE", 
            "GTE", "NEQ", "EQ", "LT", "GT", "STR_OPR", "AND", "OR", "MOD", 
            "ID", "WS", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "BOOLEANLIT", "FLOATLIT", "INTLIT", "DECPART", "EXPPART", 
                  "DIGIT_SEQ", "INTPART", "STRINGLIT", "STRINGABLE_CHARACTER", 
                  "STRINGABLE_ESCAPE", "ILLEGAL_ESCAPE_CHARACTER", "INTEGER", 
                  "FLOAT", "RETURN", "AUTO", "BREAK", "FALSE", "VOID", "ARRAY", 
                  "OUT", "BOOLEAN", "FOR", "STRING", "CONTINUE", "DO", "FUNCTION", 
                  "TRUE", "OF", "INHERIT", "ELSE", "IF", "WHILE", "CPP_STYLE_CMT", 
                  "C_STYLE_CMT", "SEMI", "COMMA", "COLON", "LR", "RR", "LC", 
                  "RC", "LS", "RS", "ASS", "MUL", "DIV", "ADD", "MINUS", 
                  "NOT", "LTE", "GTE", "NEQ", "EQ", "LT", "GT", "STR_OPR", 
                  "AND", "OR", "MOD", "ID", "WS", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
                  "ERROR_CHAR" ]

    grammarFileName = "MT22.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[1] = self.FLOATLIT_action 
            actions[2] = self.INTLIT_action 
            actions[7] = self.STRINGLIT_action 
            actions[61] = self.UNCLOSE_STRING_action 
            actions[62] = self.ILLEGAL_ESCAPE_action 
            actions[63] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def FLOATLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text.replace('_', '')
     

    def INTLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.text = self.text.replace('_', '')
     

    def STRINGLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.text = self.text[1:-1]
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                    raise UncloseString(self.text[1:].replace('\n','').replace('\r',''))

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:

            		raise IllegalEscape(self.text[1:])

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:

            		raise ErrorToken(self.text)

     



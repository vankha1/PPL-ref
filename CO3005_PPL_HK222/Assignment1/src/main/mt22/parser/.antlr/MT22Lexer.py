# Generated from d:/Learning_Documents_of_Third_Year/Principles of Programming Languages/Assignment 222/CO3005_PPL_HK222/Assignment1/src/main/mt22/parser/MT22.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *
# 2052612 MAI HUU NGHIA


def serializedATN():
    return [
        4,0,57,439,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,
        1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,
        1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,
        1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,47,5,47,310,
        8,47,10,47,12,47,313,9,47,1,47,1,47,1,48,1,48,1,48,1,48,5,48,321,
        8,48,10,48,12,48,324,9,48,1,48,1,48,1,48,1,48,1,48,1,49,4,49,332,
        8,49,11,49,12,49,333,1,49,1,49,1,50,1,50,1,50,5,50,341,8,50,10,50,
        12,50,344,9,50,1,50,1,50,1,50,5,50,349,8,50,10,50,12,50,352,9,50,
        3,50,354,8,50,1,50,1,50,1,51,1,51,1,51,3,51,361,8,51,1,51,3,51,364,
        8,51,1,51,1,51,1,51,3,51,369,8,51,1,51,1,51,1,52,1,52,3,52,375,8,
        52,1,52,1,52,1,52,1,52,1,53,1,53,4,53,383,8,53,11,53,12,53,384,1,
        54,1,54,1,54,1,55,1,55,5,55,392,8,55,10,55,12,55,395,9,55,1,56,1,
        56,3,56,399,8,56,1,56,4,56,402,8,56,11,56,12,56,403,1,57,1,57,5,
        57,408,8,57,10,57,12,57,411,9,57,1,58,1,58,5,58,415,8,58,10,58,12,
        58,418,9,58,1,58,3,58,421,8,58,1,58,1,58,1,59,1,59,5,59,427,8,59,
        10,59,12,59,430,9,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,322,
        0,61,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
        46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,0,109,0,111,
        0,113,0,115,54,117,55,119,56,121,57,1,0,10,2,0,10,10,13,13,3,0,9,
        10,13,13,32,32,1,0,49,57,1,0,48,57,4,0,10,10,13,13,34,34,92,92,8,
        0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,2,0,69,
        69,101,101,2,0,43,43,45,45,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,454,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
        0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
        0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,
        0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,115,1,0,
        0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,1,123,1,0,0,0,3,128,
        1,0,0,0,5,134,1,0,0,0,7,142,1,0,0,0,9,145,1,0,0,0,11,150,1,0,0,0,
        13,156,1,0,0,0,15,162,1,0,0,0,17,166,1,0,0,0,19,175,1,0,0,0,21,178,
        1,0,0,0,23,186,1,0,0,0,25,193,1,0,0,0,27,200,1,0,0,0,29,205,1,0,
        0,0,31,211,1,0,0,0,33,216,1,0,0,0,35,220,1,0,0,0,37,229,1,0,0,0,
        39,232,1,0,0,0,41,240,1,0,0,0,43,246,1,0,0,0,45,248,1,0,0,0,47,250,
        1,0,0,0,49,252,1,0,0,0,51,254,1,0,0,0,53,256,1,0,0,0,55,258,1,0,
        0,0,57,261,1,0,0,0,59,264,1,0,0,0,61,267,1,0,0,0,63,270,1,0,0,0,
        65,272,1,0,0,0,67,275,1,0,0,0,69,277,1,0,0,0,71,280,1,0,0,0,73,283,
        1,0,0,0,75,285,1,0,0,0,77,287,1,0,0,0,79,289,1,0,0,0,81,291,1,0,
        0,0,83,293,1,0,0,0,85,295,1,0,0,0,87,297,1,0,0,0,89,299,1,0,0,0,
        91,301,1,0,0,0,93,303,1,0,0,0,95,305,1,0,0,0,97,316,1,0,0,0,99,331,
        1,0,0,0,101,353,1,0,0,0,103,368,1,0,0,0,105,372,1,0,0,0,107,382,
        1,0,0,0,109,386,1,0,0,0,111,389,1,0,0,0,113,396,1,0,0,0,115,405,
        1,0,0,0,117,412,1,0,0,0,119,424,1,0,0,0,121,436,1,0,0,0,123,124,
        5,97,0,0,124,125,5,117,0,0,125,126,5,116,0,0,126,127,5,111,0,0,127,
        2,1,0,0,0,128,129,5,98,0,0,129,130,5,114,0,0,130,131,5,101,0,0,131,
        132,5,97,0,0,132,133,5,107,0,0,133,4,1,0,0,0,134,135,5,98,0,0,135,
        136,5,111,0,0,136,137,5,111,0,0,137,138,5,108,0,0,138,139,5,101,
        0,0,139,140,5,97,0,0,140,141,5,110,0,0,141,6,1,0,0,0,142,143,5,100,
        0,0,143,144,5,111,0,0,144,8,1,0,0,0,145,146,5,101,0,0,146,147,5,
        108,0,0,147,148,5,115,0,0,148,149,5,101,0,0,149,10,1,0,0,0,150,151,
        5,102,0,0,151,152,5,97,0,0,152,153,5,108,0,0,153,154,5,115,0,0,154,
        155,5,101,0,0,155,12,1,0,0,0,156,157,5,102,0,0,157,158,5,108,0,0,
        158,159,5,111,0,0,159,160,5,97,0,0,160,161,5,116,0,0,161,14,1,0,
        0,0,162,163,5,102,0,0,163,164,5,111,0,0,164,165,5,114,0,0,165,16,
        1,0,0,0,166,167,5,102,0,0,167,168,5,117,0,0,168,169,5,110,0,0,169,
        170,5,99,0,0,170,171,5,116,0,0,171,172,5,105,0,0,172,173,5,111,0,
        0,173,174,5,110,0,0,174,18,1,0,0,0,175,176,5,105,0,0,176,177,5,102,
        0,0,177,20,1,0,0,0,178,179,5,105,0,0,179,180,5,110,0,0,180,181,5,
        116,0,0,181,182,5,101,0,0,182,183,5,103,0,0,183,184,5,101,0,0,184,
        185,5,114,0,0,185,22,1,0,0,0,186,187,5,114,0,0,187,188,5,101,0,0,
        188,189,5,116,0,0,189,190,5,117,0,0,190,191,5,114,0,0,191,192,5,
        110,0,0,192,24,1,0,0,0,193,194,5,115,0,0,194,195,5,116,0,0,195,196,
        5,114,0,0,196,197,5,105,0,0,197,198,5,110,0,0,198,199,5,103,0,0,
        199,26,1,0,0,0,200,201,5,116,0,0,201,202,5,114,0,0,202,203,5,117,
        0,0,203,204,5,101,0,0,204,28,1,0,0,0,205,206,5,119,0,0,206,207,5,
        104,0,0,207,208,5,105,0,0,208,209,5,108,0,0,209,210,5,101,0,0,210,
        30,1,0,0,0,211,212,5,118,0,0,212,213,5,111,0,0,213,214,5,105,0,0,
        214,215,5,100,0,0,215,32,1,0,0,0,216,217,5,111,0,0,217,218,5,117,
        0,0,218,219,5,116,0,0,219,34,1,0,0,0,220,221,5,99,0,0,221,222,5,
        111,0,0,222,223,5,110,0,0,223,224,5,116,0,0,224,225,5,105,0,0,225,
        226,5,110,0,0,226,227,5,117,0,0,227,228,5,101,0,0,228,36,1,0,0,0,
        229,230,5,111,0,0,230,231,5,102,0,0,231,38,1,0,0,0,232,233,5,105,
        0,0,233,234,5,110,0,0,234,235,5,104,0,0,235,236,5,101,0,0,236,237,
        5,114,0,0,237,238,5,105,0,0,238,239,5,116,0,0,239,40,1,0,0,0,240,
        241,5,97,0,0,241,242,5,114,0,0,242,243,5,114,0,0,243,244,5,97,0,
        0,244,245,5,121,0,0,245,42,1,0,0,0,246,247,5,43,0,0,247,44,1,0,0,
        0,248,249,5,45,0,0,249,46,1,0,0,0,250,251,5,42,0,0,251,48,1,0,0,
        0,252,253,5,47,0,0,253,50,1,0,0,0,254,255,5,37,0,0,255,52,1,0,0,
        0,256,257,5,33,0,0,257,54,1,0,0,0,258,259,5,38,0,0,259,260,5,38,
        0,0,260,56,1,0,0,0,261,262,5,124,0,0,262,263,5,124,0,0,263,58,1,
        0,0,0,264,265,5,61,0,0,265,266,5,61,0,0,266,60,1,0,0,0,267,268,5,
        33,0,0,268,269,5,61,0,0,269,62,1,0,0,0,270,271,5,60,0,0,271,64,1,
        0,0,0,272,273,5,60,0,0,273,274,5,61,0,0,274,66,1,0,0,0,275,276,5,
        62,0,0,276,68,1,0,0,0,277,278,5,62,0,0,278,279,5,61,0,0,279,70,1,
        0,0,0,280,281,5,58,0,0,281,282,5,58,0,0,282,72,1,0,0,0,283,284,5,
        40,0,0,284,74,1,0,0,0,285,286,5,41,0,0,286,76,1,0,0,0,287,288,5,
        91,0,0,288,78,1,0,0,0,289,290,5,93,0,0,290,80,1,0,0,0,291,292,5,
        46,0,0,292,82,1,0,0,0,293,294,5,44,0,0,294,84,1,0,0,0,295,296,5,
        59,0,0,296,86,1,0,0,0,297,298,5,58,0,0,298,88,1,0,0,0,299,300,5,
        123,0,0,300,90,1,0,0,0,301,302,5,125,0,0,302,92,1,0,0,0,303,304,
        5,61,0,0,304,94,1,0,0,0,305,306,5,47,0,0,306,307,5,47,0,0,307,311,
        1,0,0,0,308,310,8,0,0,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,
        1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,311,1,0,0,0,314,315,
        6,47,0,0,315,96,1,0,0,0,316,317,5,47,0,0,317,318,5,42,0,0,318,322,
        1,0,0,0,319,321,9,0,0,0,320,319,1,0,0,0,321,324,1,0,0,0,322,323,
        1,0,0,0,322,320,1,0,0,0,323,325,1,0,0,0,324,322,1,0,0,0,325,326,
        5,42,0,0,326,327,5,47,0,0,327,328,1,0,0,0,328,329,6,48,0,0,329,98,
        1,0,0,0,330,332,7,1,0,0,331,330,1,0,0,0,332,333,1,0,0,0,333,331,
        1,0,0,0,333,334,1,0,0,0,334,335,1,0,0,0,335,336,6,49,0,0,336,100,
        1,0,0,0,337,354,5,48,0,0,338,342,7,2,0,0,339,341,7,3,0,0,340,339,
        1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,350,
        1,0,0,0,344,342,1,0,0,0,345,346,5,95,0,0,346,349,7,3,0,0,347,349,
        7,3,0,0,348,345,1,0,0,0,348,347,1,0,0,0,349,352,1,0,0,0,350,348,
        1,0,0,0,350,351,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,353,337,
        1,0,0,0,353,338,1,0,0,0,354,355,1,0,0,0,355,356,6,50,1,0,356,102,
        1,0,0,0,357,363,3,101,50,0,358,364,3,111,55,0,359,361,3,111,55,0,
        360,359,1,0,0,0,360,361,1,0,0,0,361,362,1,0,0,0,362,364,3,113,56,
        0,363,358,1,0,0,0,363,360,1,0,0,0,364,369,1,0,0,0,365,366,3,111,
        55,0,366,367,3,113,56,0,367,369,1,0,0,0,368,357,1,0,0,0,368,365,
        1,0,0,0,369,370,1,0,0,0,370,371,6,51,2,0,371,104,1,0,0,0,372,374,
        5,34,0,0,373,375,3,107,53,0,374,373,1,0,0,0,374,375,1,0,0,0,375,
        376,1,0,0,0,376,377,5,34,0,0,377,378,1,0,0,0,378,379,6,52,3,0,379,
        106,1,0,0,0,380,383,8,4,0,0,381,383,3,109,54,0,382,380,1,0,0,0,382,
        381,1,0,0,0,383,384,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,
        108,1,0,0,0,386,387,5,92,0,0,387,388,7,5,0,0,388,110,1,0,0,0,389,
        393,5,46,0,0,390,392,7,3,0,0,391,390,1,0,0,0,392,395,1,0,0,0,393,
        391,1,0,0,0,393,394,1,0,0,0,394,112,1,0,0,0,395,393,1,0,0,0,396,
        398,7,6,0,0,397,399,7,7,0,0,398,397,1,0,0,0,398,399,1,0,0,0,399,
        401,1,0,0,0,400,402,7,3,0,0,401,400,1,0,0,0,402,403,1,0,0,0,403,
        401,1,0,0,0,403,404,1,0,0,0,404,114,1,0,0,0,405,409,7,8,0,0,406,
        408,7,9,0,0,407,406,1,0,0,0,408,411,1,0,0,0,409,407,1,0,0,0,409,
        410,1,0,0,0,410,116,1,0,0,0,411,409,1,0,0,0,412,416,5,34,0,0,413,
        415,3,107,53,0,414,413,1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,416,
        417,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,419,421,5,0,0,1,420,
        419,1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,0,422,423,6,58,4,0,423,
        118,1,0,0,0,424,428,5,34,0,0,425,427,3,107,53,0,426,425,1,0,0,0,
        427,430,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,
        430,428,1,0,0,0,431,432,5,92,0,0,432,433,8,5,0,0,433,434,1,0,0,0,
        434,435,6,59,5,0,435,120,1,0,0,0,436,437,9,0,0,0,437,438,6,60,6,
        0,438,122,1,0,0,0,21,0,311,322,333,342,348,350,353,360,363,368,374,
        382,384,393,398,403,409,416,420,428,7,6,0,0,1,50,0,1,51,1,1,52,2,
        1,58,3,1,59,4,1,60,5
    ]

class MT22Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    AUTO = 1
    BREAK = 2
    BOOLEAN = 3
    DO = 4
    ELSE = 5
    FALSE = 6
    FLOAT = 7
    FOR = 8
    FUNCTION = 9
    IF = 10
    INTEGER = 11
    RETURN = 12
    STRING = 13
    TRUE = 14
    WHILE = 15
    VOID = 16
    OUT = 17
    CONTINUE = 18
    OF = 19
    INHERIT = 20
    ARRAY = 21
    ADD = 22
    SUB = 23
    MUL = 24
    DIV = 25
    MOD = 26
    NOT = 27
    AND = 28
    OR = 29
    EQUAL = 30
    NEQUAL = 31
    LT = 32
    LTE = 33
    GT = 34
    GTE = 35
    CONCAT = 36
    LB = 37
    RB = 38
    LSB = 39
    RSB = 40
    DOT = 41
    COMMA = 42
    SM = 43
    COLON = 44
    LCB = 45
    RCB = 46
    ASS = 47
    LINE_CMT = 48
    BLOCK_CMT = 49
    WS = 50
    INTEGERLIT = 51
    FLOATLIT = 52
    STRINGLIT = 53
    ID = 54
    UNCLOSE_STRING = 55
    ILLEGAL_ESCAPE = 56
    ERROR_CHAR = 57

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'auto'", "'break'", "'boolean'", "'do'", "'else'", "'false'", 
            "'float'", "'for'", "'function'", "'if'", "'integer'", "'return'", 
            "'string'", "'true'", "'while'", "'void'", "'out'", "'continue'", 
            "'of'", "'inherit'", "'array'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'!'", "'&&'", "'||'", "'=='", "'!='", "'<'", "'<='", 
            "'>'", "'>='", "'::'", "'('", "')'", "'['", "']'", "'.'", "','", 
            "';'", "':'", "'{'", "'}'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "AUTO", "BREAK", "BOOLEAN", "DO", "ELSE", "FALSE", "FLOAT", 
            "FOR", "FUNCTION", "IF", "INTEGER", "RETURN", "STRING", "TRUE", 
            "WHILE", "VOID", "OUT", "CONTINUE", "OF", "INHERIT", "ARRAY", 
            "ADD", "SUB", "MUL", "DIV", "MOD", "NOT", "AND", "OR", "EQUAL", 
            "NEQUAL", "LT", "LTE", "GT", "GTE", "CONCAT", "LB", "RB", "LSB", 
            "RSB", "DOT", "COMMA", "SM", "COLON", "LCB", "RCB", "ASS", "LINE_CMT", 
            "BLOCK_CMT", "WS", "INTEGERLIT", "FLOATLIT", "STRINGLIT", "ID", 
            "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "AUTO", "BREAK", "BOOLEAN", "DO", "ELSE", "FALSE", "FLOAT", 
                  "FOR", "FUNCTION", "IF", "INTEGER", "RETURN", "STRING", 
                  "TRUE", "WHILE", "VOID", "OUT", "CONTINUE", "OF", "INHERIT", 
                  "ARRAY", "ADD", "SUB", "MUL", "DIV", "MOD", "NOT", "AND", 
                  "OR", "EQUAL", "NEQUAL", "LT", "LTE", "GT", "GTE", "CONCAT", 
                  "LB", "RB", "LSB", "RSB", "DOT", "COMMA", "SM", "COLON", 
                  "LCB", "RCB", "ASS", "LINE_CMT", "BLOCK_CMT", "WS", "INTEGERLIT", 
                  "FLOATLIT", "STRINGLIT", "StrCha", "Esc", "Deci", "Expo", 
                  "ID", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "MT22.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[50] = self.INTEGERLIT_action 
            actions[51] = self.FLOATLIT_action 
            actions[52] = self.STRINGLIT_action 
            actions[58] = self.UNCLOSE_STRING_action 
            actions[59] = self.ILLEGAL_ESCAPE_action 
            actions[60] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def INTEGERLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text.replace("_","")
     

    def FLOATLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.text = self.text.replace("_","")
     

    def STRINGLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.text = self.text[1:-1]
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

            y = str(self.text)
            raise UncloseString(y[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:

            y = str(self.text)
            raise IllegalEscape(y[1:])

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:

            raise ErrorToken(self.text)

     


